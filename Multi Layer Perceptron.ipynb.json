{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import libraries for the notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "from torchvision import datasets\n",
    "import torchvision.transforms as transforms\n",
    "from torch.utils.data.sampler import SubsetRandomSampler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Data Preaparation__\n",
    "\n",
    "Downloading may take a few moments, and you should see your progress as the data is loading. You may also choose to change the batch_size if you want to load more data at a time.\n",
    "This cell will create DataLoaders for each of our datasets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# number of subprocesses to use for data loading\n",
    "num_workers = 0\n",
    "# how many samples per batch to load\n",
    "batch_size = 20\n",
    "# percentage of training set to use as validation\n",
    "valid_size = 0.2\n",
    "\n",
    "# convert data to torch.FloatTensor\n",
    "transform = transforms.ToTensor()\n",
    "\n",
    "# choose the training and testing datasets\n",
    "train_data = datasets.MNIST(root = 'data', train = True, download = True, transform = transform)\n",
    "test_data = datasets.MNIST(root = 'data', train = False, download = True, transform = transform)\n",
    "\n",
    "# obtain training indices that will be used for validation\n",
    "num_train = len(train_data)\n",
    "indices = list(range(num_train))\n",
    "np.random.shuffle(indices)\n",
    "split = int(np.floor(valid_size * num_train))\n",
    "train_index, valid_index = indices[split:], indices[:split]\n",
    "\n",
    "# define samplers for obtaining training and validation batches\n",
    "train_sampler = SubsetRandomSampler(train_index)\n",
    "valid_sampler = SubsetRandomSampler(valid_index)\n",
    "\n",
    "# prepare data loaders\n",
    "train_loader = torch.utils.data.DataLoader(train_data, batch_size = batch_size, \n",
    "                                           sampler = train_sampler, num_workers = num_workers)\n",
    "valid_loader = torch.utils.data.DataLoader(train_data, batch_size = batch_size,\n",
    "                                          sampler = valid_sampler, num_workers = num_workers)\n",
    "test_loader = torch.utils.data.DataLoader(test_data, batch_size = batch_size,\n",
    "                                         num_workers = num_workers)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Visualize a batch of training data__\n",
    "\n",
    "The first step in a classification task is to take a look at the data, make sure it is loaded in correctly, then make any initial observations about patterns in that data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1800x288 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "    \n",
    "# obtain one batch of training images\n",
    "dataiter = iter(train_loader)\n",
    "images, labels = dataiter.next()\n",
    "images = images.numpy()\n",
    "\n",
    "# plot the images in the batch, along with the corresponding labels\n",
    "fig = plt.figure(figsize=(25, 4))\n",
    "for idx in np.arange(20):\n",
    "    ax = fig.add_subplot(2, 20/2, idx+1, xticks=[], yticks=[])\n",
    "    ax.imshow(np.squeeze(images[idx]), cmap='gray')\n",
    "    # print out the correct label for each image\n",
    "    # .item() gets the value contained in a Tensor\n",
    "    ax.set_title(str(labels[idx].item()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __View an image in more detail__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "img = np.squeeze(images[1])\n",
    "\n",
    "fig = plt.figure(figsize = (12,12)) \n",
    "ax = fig.add_subplot(111)\n",
    "ax.imshow(img, cmap='gray')\n",
    "width, height = img.shape\n",
    "thresh = img.max()/2.5\n",
    "for x in range(width):\n",
    "    for y in range(height):\n",
    "        val = round(img[x][y],2) if img[x][y] !=0 else 0\n",
    "        ax.annotate(str(val), xy=(y,x),\n",
    "                    horizontalalignment='center',\n",
    "                    verticalalignment='center',\n",
    "                    color='white' if img[x][y]<thresh else 'black')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Define Network Architecture__\n",
    "\n",
    "The architecture will be responsible for seeing as input a 784-dim Tensor of pixel values for each image, and producing a Tensor of length 10 (our number of classes) that indicates the class scores for an input image. This particular example uses two hidden layers and dropout to avoid overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Net(\n",
      "  (fc1): Linear(in_features=784, out_features=512, bias=True)\n",
      "  (fc2): Linear(in_features=512, out_features=512, bias=True)\n",
      "  (fc3): Linear(in_features=512, out_features=10, bias=True)\n",
      "  (droput): Dropout(p=0.2)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "# define NN architecture\n",
    "class Net(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(Net,self).__init__()\n",
    "        # number of hidden nodes in each layer (512)\n",
    "        hidden_1 = 512\n",
    "        hidden_2 = 512\n",
    "        # linear layer (784 -> hidden_1)\n",
    "        self.fc1 = nn.Linear(28*28, 512)\n",
    "        # linear layer (n_hidden -> hidden_2)\n",
    "        self.fc2 = nn.Linear(512,512)\n",
    "        # linear layer (n_hidden -> 10)\n",
    "        self.fc3 = nn.Linear(512,10)\n",
    "        # dropout layer (p=0.2)\n",
    "        # dropout prevents overfitting of data\n",
    "        self.droput = nn.Dropout(0.2)\n",
    "        \n",
    "    def forward(self,x):\n",
    "        # flatten image input\n",
    "        x = x.view(-1,28*28)\n",
    "        # add hidden layer, with relu activation function\n",
    "        x = F.relu(self.fc1(x))\n",
    "        # add dropout layer\n",
    "        x = self.droput(x)\n",
    "         # add hidden layer, with relu activation function\n",
    "        x = F.relu(self.fc2(x))\n",
    "        # add dropout layer\n",
    "        x = self.droput(x)\n",
    "        # add output layer\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "    \n",
    "# initialize the NN\n",
    "model = Net()\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Specify Loss function and Optimizer__\n",
    "\n",
    "It's recommended that you use cross-entropy loss for classification. If you look at the documentation (linked above), you can see that PyTorch's cross entropy function applies a softmax funtion to the output layer and then calculates the log loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# specify loss function (categorical cross-entropy)\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "\n",
    "# specify optimizer (stochastic gradient descent) and learning rate = 0.01\n",
    "optimizer = torch.optim.SGD(model.parameters(),lr = 0.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Train the network__\n",
    "\n",
    "The steps for training/learning from a batch of data are described in the comments below:\n",
    "Clear the gradients of all optimized variables\n",
    "Forward pass: compute predicted outputs by passing inputs to the model\n",
    "Calculate the loss\n",
    "Backward pass: compute gradient of the loss with respect to model parameters\n",
    "Perform a single optimization step (parameter update)\n",
    "Update average training loss\n",
    "The following loop trains for 50 epochs; take a look at how the values for the training loss decrease over time. We want it to decrease while also avoiding overfitting the training data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 1 \tTraining Loss: 0.358109 \tValidation Loss: 0.000721\n",
      "Validation loss decreased (inf --> 0.000721).  Saving model ...\n",
      "Epoch: 2 \tTraining Loss: 0.286312 \tValidation Loss: 0.000153\n",
      "Validation loss decreased (0.000721 --> 0.000153).  Saving model ...\n",
      "Epoch: 3 \tTraining Loss: 0.237114 \tValidation Loss: 0.000166\n",
      "Epoch: 4 \tTraining Loss: 0.200207 \tValidation Loss: 0.000266\n",
      "Epoch: 5 \tTraining Loss: 0.173565 \tValidation Loss: 0.000119\n",
      "Validation loss decreased (0.000153 --> 0.000119).  Saving model ...\n",
      "Epoch: 6 \tTraining Loss: 0.151605 \tValidation Loss: 0.000112\n",
      "Validation loss decreased (0.000119 --> 0.000112).  Saving model ...\n",
      "Epoch: 7 \tTraining Loss: 0.137478 \tValidation Loss: 0.000023\n",
      "Validation loss decreased (0.000112 --> 0.000023).  Saving model ...\n",
      "Epoch: 8 \tTraining Loss: 0.122625 \tValidation Loss: 0.000073\n",
      "Epoch: 9 \tTraining Loss: 0.110987 \tValidation Loss: 0.000042\n",
      "Epoch: 10 \tTraining Loss: 0.102305 \tValidation Loss: 0.000041\n",
      "Epoch: 11 \tTraining Loss: 0.094647 \tValidation Loss: 0.000029\n",
      "Epoch: 12 \tTraining Loss: 0.087461 \tValidation Loss: 0.000224\n",
      "Epoch: 13 \tTraining Loss: 0.078741 \tValidation Loss: 0.000167\n",
      "Epoch: 14 \tTraining Loss: 0.075729 \tValidation Loss: 0.000439\n",
      "Epoch: 15 \tTraining Loss: 0.068742 \tValidation Loss: 0.000011\n",
      "Validation loss decreased (0.000023 --> 0.000011).  Saving model ...\n",
      "Epoch: 16 \tTraining Loss: 0.064448 \tValidation Loss: 0.000079\n",
      "Epoch: 17 \tTraining Loss: 0.060015 \tValidation Loss: 0.000089\n",
      "Epoch: 18 \tTraining Loss: 0.054989 \tValidation Loss: 0.000002\n",
      "Validation loss decreased (0.000011 --> 0.000002).  Saving model ...\n",
      "Epoch: 19 \tTraining Loss: 0.051557 \tValidation Loss: 0.000093\n",
      "Epoch: 20 \tTraining Loss: 0.048690 \tValidation Loss: 0.000064\n",
      "Epoch: 21 \tTraining Loss: 0.046675 \tValidation Loss: 0.000013\n",
      "Epoch: 22 \tTraining Loss: 0.044968 \tValidation Loss: 0.000005\n",
      "Epoch: 23 \tTraining Loss: 0.041578 \tValidation Loss: 0.000002\n",
      "Validation loss decreased (0.000002 --> 0.000002).  Saving model ...\n",
      "Epoch: 24 \tTraining Loss: 0.039619 \tValidation Loss: 0.000009\n",
      "Epoch: 25 \tTraining Loss: 0.037674 \tValidation Loss: 0.000035\n",
      "Epoch: 26 \tTraining Loss: 0.035586 \tValidation Loss: 0.000267\n",
      "Epoch: 27 \tTraining Loss: 0.032741 \tValidation Loss: 0.000087\n",
      "Epoch: 28 \tTraining Loss: 0.032251 \tValidation Loss: 0.000015\n",
      "Epoch: 29 \tTraining Loss: 0.030537 \tValidation Loss: 0.000026\n",
      "Epoch: 30 \tTraining Loss: 0.029688 \tValidation Loss: 0.000126\n",
      "Epoch: 31 \tTraining Loss: 0.028359 \tValidation Loss: 0.000022\n",
      "Epoch: 32 \tTraining Loss: 0.026496 \tValidation Loss: 0.000001\n",
      "Validation loss decreased (0.000002 --> 0.000001).  Saving model ...\n",
      "Epoch: 33 \tTraining Loss: 0.025373 \tValidation Loss: 0.000353\n",
      "Epoch: 34 \tTraining Loss: 0.023485 \tValidation Loss: 0.000021\n",
      "Epoch: 35 \tTraining Loss: 0.022993 \tValidation Loss: 0.000007\n",
      "Epoch: 36 \tTraining Loss: 0.022483 \tValidation Loss: 0.000010\n",
      "Epoch: 37 \tTraining Loss: 0.021006 \tValidation Loss: 0.000003\n",
      "Epoch: 38 \tTraining Loss: 0.020047 \tValidation Loss: 0.000002\n",
      "Epoch: 39 \tTraining Loss: 0.020464 \tValidation Loss: 0.000006\n",
      "Epoch: 40 \tTraining Loss: 0.018751 \tValidation Loss: 0.000058\n",
      "Epoch: 41 \tTraining Loss: 0.017439 \tValidation Loss: 0.000074\n",
      "Epoch: 42 \tTraining Loss: 0.016793 \tValidation Loss: 0.000002\n",
      "Epoch: 43 \tTraining Loss: 0.015827 \tValidation Loss: 0.000067\n",
      "Epoch: 44 \tTraining Loss: 0.015033 \tValidation Loss: 0.000005\n",
      "Epoch: 45 \tTraining Loss: 0.015084 \tValidation Loss: 0.000010\n",
      "Epoch: 46 \tTraining Loss: 0.014016 \tValidation Loss: 0.000014\n",
      "Epoch: 47 \tTraining Loss: 0.014073 \tValidation Loss: 0.000040\n",
      "Epoch: 48 \tTraining Loss: 0.013768 \tValidation Loss: 0.000001\n",
      "Validation loss decreased (0.000001 --> 0.000001).  Saving model ...\n",
      "Epoch: 49 \tTraining Loss: 0.013486 \tValidation Loss: 0.000348\n",
      "Epoch: 50 \tTraining Loss: 0.012876 \tValidation Loss: 0.000017\n"
     ]
    }
   ],
   "source": [
    "# number of epochs to train the model\n",
    "n_epochs = 50\n",
    "\n",
    "# initialize tracker for minimum validation loss\n",
    "valid_loss_min = np.Inf  # set initial \"min\" to infinity\n",
    "\n",
    "for epoch in range(n_epochs):\n",
    "    # monitor losses\n",
    "    train_loss = 0\n",
    "    valid_loss = 0\n",
    "    \n",
    "     \n",
    "    ###################\n",
    "    # train the model #\n",
    "    ###################\n",
    "    model.train() # prep model for training\n",
    "    for data,label in train_loader:\n",
    "        # clear the gradients of all optimized variables\n",
    "        optimizer.zero_grad()\n",
    "        # forward pass: compute predicted outputs by passing inputs to the model\n",
    "        output = model(data)\n",
    "        # calculate the loss\n",
    "        loss = criterion(output,label)\n",
    "        # backward pass: compute gradient of the loss with respect to model parameters\n",
    "        loss.backward()\n",
    "        # perform a single optimization step (parameter update)\n",
    "        optimizer.step()\n",
    "        # update running training loss\n",
    "        train_loss += loss.item() * data.size(0)\n",
    "        \n",
    "        \n",
    "     ######################    \n",
    "    # validate the model #\n",
    "    ######################\n",
    "    model.eval()  # prep model for evaluation\n",
    "    for data,label in valid_loader:\n",
    "        # forward pass: compute predicted outputs by passing inputs to the model\n",
    "        output = model(data)\n",
    "        # calculate the loss\n",
    "        loss = criterion(output,label)\n",
    "        # update running validation loss \n",
    "        valid_loss = loss.item() * data.size(0)\n",
    "    \n",
    "    # print training/validation statistics \n",
    "    # calculate average loss over an epoch\n",
    "    train_loss = train_loss / len(train_loader.sampler)\n",
    "    valid_loss = valid_loss / len(valid_loader.sampler)\n",
    "    \n",
    "    print('Epoch: {} \\tTraining Loss: {:.6f} \\tValidation Loss: {:.6f}'.format(\n",
    "        epoch+1, \n",
    "        train_loss,\n",
    "        valid_loss\n",
    "        ))\n",
    "    \n",
    "    # save model if validation loss has decreased\n",
    "    if valid_loss <= valid_loss_min:\n",
    "        print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(\n",
    "        valid_loss_min,\n",
    "        valid_loss))\n",
    "        torch.save(model.state_dict(), 'model.pt')\n",
    "        valid_loss_min = valid_loss\n",
    "    \n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Load the Model with lowest validation loss__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.load_state_dict(torch.load('model.pt'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Test the trained Network__\n",
    "\n",
    "Finally, we test our best model on previously unseen test data and evaluate it's performance. Testing on unseen data is a good way to check that our model generalizes well. It may also be useful to be granular in this analysis and take a look at how this model performs on each class as well as looking at its overall loss and accuracy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Loss: 0.060641\n",
      "\n",
      "Test Accuracy of     0: 98% (970/980)\n",
      "Test Accuracy of     1: 99% (1124/1135)\n",
      "Test Accuracy of     2: 98% (1012/1032)\n",
      "Test Accuracy of     3: 98% (992/1010)\n",
      "Test Accuracy of     4: 98% (966/982)\n",
      "Test Accuracy of     5: 97% (868/892)\n",
      "Test Accuracy of     6: 98% (941/958)\n",
      "Test Accuracy of     7: 97% (1004/1028)\n",
      "Test Accuracy of     8: 98% (955/974)\n",
      "Test Accuracy of     9: 97% (986/1009)\n",
      "\n",
      "Test Accuracy (Overall): 98% (9818/10000)\n"
     ]
    }
   ],
   "source": [
    "# initialize lists to monitor test loss and accuracy\n",
    "test_loss = 0.0\n",
    "class_correct = list(0. for i in range(10))\n",
    "class_total = list(0. for i in range(10))\n",
    "\n",
    "model.eval() # prep model for evaluation\n",
    "\n",
    "for data, target in test_loader:\n",
    "    # forward pass: compute predicted outputs by passing inputs to the model\n",
    "    output = model(data)\n",
    "    # calculate the loss\n",
    "    loss = criterion(output, target)\n",
    "    # update test loss \n",
    "    test_loss += loss.item()*data.size(0)\n",
    "    # convert output probabilities to predicted class\n",
    "    _, pred = torch.max(output, 1)\n",
    "    # compare predictions to true label\n",
    "    correct = np.squeeze(pred.eq(target.data.view_as(pred)))\n",
    "    # calculate test accuracy for each object class\n",
    "    for i in range(len(target)):\n",
    "        label = target.data[i]\n",
    "        class_correct[label] += correct[i].item()\n",
    "        class_total[label] += 1\n",
    "\n",
    "# calculate and print avg test loss\n",
    "test_loss = test_loss/len(test_loader.sampler)\n",
    "print('Test Loss: {:.6f}\\n'.format(test_loss))\n",
    "\n",
    "for i in range(10):\n",
    "    if class_total[i] > 0:\n",
    "        print('Test Accuracy of %5s: %2d%% (%2d/%2d)' % (\n",
    "            str(i), 100 * class_correct[i] / class_total[i],\n",
    "            np.sum(class_correct[i]), np.sum(class_total[i])))\n",
    "    else:\n",
    "        print('Test Accuracy of %5s: N/A (no training examples)' % (classes[i]))\n",
    "\n",
    "print('\\nTest Accuracy (Overall): %2d%% (%2d/%2d)' % (\n",
    "    100. * np.sum(class_correct) / np.sum(class_total),\n",
    "    np.sum(class_correct), np.sum(class_total)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### __Visualize Sample Test Results__\n",
    "\n",
    "This cell displays test images and their labels in this format: predicted (ground-truth). The text will be green for accurately classified examples and red for incorrect predictions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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AgAAAAAAAECMsYkLAAAAAAAAADHGJi4AAAAAAAAAxBibuAAAAAAAAAAQY2ziAgAAAAAAAECMVSnrAQCFdMUVVzjtatWqmXjfffd1cl27do38nPvvv99pf/DBByZ+4oknNmWIAAAAAAAAgIM7cQEAAAAAAAAgxtjEBQAAAAAAAIAYo5wCit6zzz5r4kwlEnzr1q2LzJ1//vlO+/DDDzfx+PHjndycOXOyPicqjiZNmph4xowZTq5Xr14mvueeewo2JhTGVltt5bRvu+02E/try2effea0TzrpJBPPnj07D6MDAAAAypfatWs77Z133jmr4/zr6csuu8zEX375pZObOXOmiSdPnlzSIQKlgjtxAQAAAAAAACDG2MQFAAAAAAAAgBhjExcAAAAAAAAAYoyauCg6dg1cKfs6uH5d0tdff93Eu+22m5Pr1KmT027UqJGJe/To4eRuuummrM6PiqV58+Ym9usvz507t9DDQQE1aNDAaZ977rkm9udCy5Ytnfaxxx5r4iFDhuRhdChLLVq0cNqjRo0y8S677JL38x9xxBFOe/r06Sb+/vvv835+xIt9rTNmzBgnd8kll5h46NChTu6PP/7I78CQs2222cbEzz33nJObOHGiiYcNG+bkvvvuu7yOy7f11ls77UMPPdTEY8eOdXJr1qwpyJgAlL1jjjnGaR933HEmbteunZNr3LhxVp9p17mVpIYNG5p48803jzyucuXKWX0+UNq4ExcAAAAAAAAAYoxNXAAAAAAAAACIMcopoCi0atXKxCeccEJkv6lTpzpt+xGMBQsWOLlly5aZeLPNNnNyH374odPeb7/9TFy3bt0sRoyKrlmzZiZevny5kxs9enShh4M8q1+/vokfe+yxMhwJ4uzII4902pke48sHv1TQWWedZeLu3bsXdCwoPP/65b777ovse++995r44YcfdnIrV64s3YEhZ7Vr13ba9nWwX7Lg559/NnGhyydI7ng+++wzJ2d/h/plhr755pv8DgwZ1axZ08R+Cbm9997bxIcffriTowwG/mSXJZSkiy++2MR2yTFJqlatmtMOgmCTz9+kSZNN/gygkLgTFwAAAAAAAABijE1cAAAAAAAAAIgxNnEBAAAAAAAAIMbKvCZu165dnbZd9+THH390cqtWrTLxU0895eR++uknE1MbqeJp0KCBif3aOHb9L7/e4Lx587L6/Msvv9xpN23aNLLvK6+8ktVnomKx64JJ0iWXXGLiJ554otDDQZ794x//cNqdO3c28f7775/z5x566KEmrlTJ/XvYyZMnm/jdd9/N+RworCpV/ncp1rFjxzIcyYZ1KHv37m3irbbaysn5tbxR/tnriyTtuOOOkX2HDx9uYvv6HGWvXr16Jn722WedXJ06dUzs1zy+9NJL8zuwjejfv7+Jd911Vyd3/vnnm5jfeWWrR48eTvuGG24w8U477RR5nF07V5J+/fXX0h0Yyi3/u6ZXr155P+eMGTNM7L8zB+VP48aNTWx/B0obvi+pXbt2Jl63bp2TGzp0qInff/99Jxen7x7uxAUAAAAAAACAGGMTFwAAAAAAAABirMzLKdx6661Oe5dddsnqOPuxGkn67bffTFwWt8TPnTvXxP4/06efflro4VQ4L730kont2+kld24sXLgwp8/v3r27065atWpOn4OKa4899nDa9qPJ/uOOKP/uvPNOp+0/rpOrE088MW0sSbNnzzZxt27dnJz/mDzio3379iY+6KCDnJx/PZFvtWvXdtp26aAtt9zSyVFOofzbfPPNnXa/fv2yPtYuAxSGYamNCZuuRYsWJrYfG/UNHDiwAKOJttdeezltu3TZ6NGjnRzXSWXLftz9rrvucnJ169Y1caa14J577nHadlkxKfffaIgP/zF2uyyC/2j62LFjTfz77787uSVLlpjYv9bwSzu98cYbJv7yyy+d3EcffWTizz//3MmtXLky8hyIJ7s0ob9+2L+J/HlYEgcccICJ165d6+S++uorE0+YMMHJ2XN99erVOZ8/W9yJCwAAAAAAAAAxxiYuAAAAAAAAAMQYm7gAAAAAAAAAEGNlXhP33HPPddr77ruviadPn+7k9txzTxPb9Z4kt+bTgQce6OS+//57E++0005Zj82vgzF//nwTN2jQIPK4OXPmOG1q4haWXRdyU/Tp08fETZo0ydjXrrljx8CfrrzySqdtz1PWiOLw6quvmrhSpdL5O9Jff/3VaS9btszEDRs2dHK77rqriT/++GMnV7ly5VIZDzadXdNLkoYPH27iWbNmObkbb7yxIGP60/HHH1/Q86Fs7bPPPk67ZcuWkX39a+LXXnstL2NCyW2zzTZOu0uXLpF9zz77bBPbv2sKxa6D++abb0b282vi2u+3QOFdccUVJq5Tp05On+HX6j/qqKOc9g033GBiv35uIWpMIjd2jVq7Pq0k7bfffiY+4YQTIj/jww8/dNr2Ps93333n5HbeeWenbb+XqLTeP4GyY+8FXnzxxU7OXkNq1qwZ+Rk//PCD037vvfec9n//+18T+7/P7XeI7L///k7OXvs6duzo5CZPnmzioUOHRo6ttHAnLgAAAAAAAADEGJu4AAAAAAAAABBjZV5O4a233srYto0dOzYyV7t2bRM3a9bMydm3Rbdu3Trrsa1atcppz5w508R+qQf79mr/cUiUD8cee6zTHjhwoIk322wzJ/fLL7847auvvtrEK1asyMPoUN7ssssuTrtVq1ZO215Pli9fXoghoZS1bdvWae++++4m9h/pyvYRL/8RHP/RtCVLlpi4Q4cOTq5fv36Rn3vhhRea+P77789qLMiP/v37O237UUT/8VK7fEa+2Ncv/pzm0cTilumxe5+/FiE+7rjjDqd92mmnmdj+DSRJzz//fEHGFKVNmzYm3nbbbZ3co48+auInn3yyUENCGn65pjPPPDOy75QpU0z8888/O7nDDz888ritt97aadslG5566ikn99NPP0UPFgXl/yZ++umnTWyXT5DcklCZyqf4/BIKNr9sJcq3Bx54wGnbZTfq1asXeZy/Z/if//zHxNdcc42T8/f0bAcffLDTtn8vPfzww07O3mP017ohQ4aYeOTIkU4uH6WLuBMXAAAAAAAAAGKMTVwAAAAAAAAAiDE2cQEAAAAAAAAgxsq8Jm5pWbRokYnfeeedyH6Zau5ujF07zK7BK7l1OJ599tmcz4Gy49cs9Wv+2Px/x+PHj8/LmFB++bUlffmoj4P8s2sdP/PMM04uU+0m2+zZs522XTspmUw6uUw1tv3POe+880xcv359J3frrbeaeIsttnBy9957r4nXrFkTeT7krmvXribu2LGjk/vmm29M/OmnnxZsTH+yayn7NXDHjRtn4sWLFxdqSCiQQw89NGN+9erVJs5UcxtlKwxDp23/d/zjjz86Ofvfab5Uq1bNxH5twosuusjE/rjPOuus/A4MWfPfL1OjRg0Tv/fee07Ovt71ry9OOeUUE/tzoVGjRk57u+22M/GLL77o5I4++mgTL1y4MOPYUfqqV69uYvs9MJL7TpkFCxY4udtvv93EvDOm4vLXhSuvvNLE55xzjpMLgsDE/m9l+50et912m5PL9f0ydevWddqVK1c28YABA5yc/X4uv254oXEnLgAAAAAAAADEGJu4AAAAAAAAABBjRVNOIR+22WYbp33fffeZuFIld/974MCBJuYxj/LjhRdeMPERRxwR2e/xxx932v3798/bmFAc9tlnn4x5+/F2lB9VqvzvazPb8gmSW3Kle/fuTs5//CxbfjmFm266ycSDBw92cltuuaWJ/bk3ZswYE8+aNSunsSCzk046ycT2vwvJvbYoBLskiCT16NHDxH/88YeTGzRokIkptVEcDj744LRxOvbjiV988UXexoT8OeaYY5z2G2+8YWK/RIr9qGpJ+OWj2rVrZ+IDDzww8rgRI0bkdD7k3+abb+607dIXd955Z+Rxq1atctqPPPKIie3vQUnabbfdIj/Hf/S+EGVAEK1z584m7tu3r5ObM2eOidu0aePklixZkt+BoVywvxMkqU+fPia2yydI0g8//GBiu5SpJH388cc5nd8ukSBJO+20k4n9PZ5XX33VxH75VJs/7ieeeMLEhSg/xp24AAAAAAAAABBjbOICAAAAAAAAQIyxiQsAAAAAAAAAMUZN3Awuvvhip12/fn0TL1q0yMl99dVXBRkTNk2DBg2ctl0Pzq//ZNeptOsCStKyZcvyMDqUd3bttzPPPNPJff7550773//+d0HGhLLx6aefOu2zzjrLxLnWwN0Yu7atXedUklq3bp2XcyK9rbfe2mlnqguZax3KXJ133nlO267tPH36dCf3zjvvFGRMKJySrAWFnpvIzd133+2027dvb+Ltt9/eyR166KEm9mv6HXfccTmd3/8cu36q79tvvzXxNddck9P5kH+nnHJKZM6vs2y/XySTVq1aZX3+Dz/80Gnzu6tsZaqfbv++mTt3biGGg3LGr0nrv3/BtnbtWhMfcMABTq5r164m3mOPPSI/Y+XKlU57zz33jGz7v8m23XbbyM+1/fzzz0670O+Q4E5cAAAAAAAAAIgxNnEBAAAAAAAAIMYop+D561//auK+fftG9uvcubPT/vLLL/M2JpSekSNHOu26detG9n3yySdNPGvWrLyNCcXj8MMPN3GdOnWc3NixY532qlWrCjIm5E+lStF/D+o/AlQI9iOt/tgyjXXAgAEm7tmzZ6mPqyLyy/PssMMOJh4+fHihh+No1KhRZI5rmeKX6ZHmxYsXO23KKZQPn332mdPed999TdysWTMnd9RRR5m4T58+Tm7+/Pkmfuyxx7I+/xNPPOG0J0+eHNl34sSJJubaOr787ym71IZfksV+rHmfffZxcieccIKJa9eu7eT89cbOn3vuuU7OnmPTpk3LOHaUPvsxdp+9piQSCSf34osvmviLL74o/YGhXHj77bedtl2qy/7tLEk777yzif/v//7PyWUq1WOXaPDLN2SSqXzCunXrnPbo0aNN/I9//MPJzZs3L+tzlgbuxAUAAAAAAACAGGMTFwAAAAAAAABijE1cAAAAAAAAAIgxauJ6OnbsaOKqVas6ubfeesvEH3zwQcHGhE1j13Fq0aJFZL9x48Y5bb+uD7Ax++23n4n9uj0jRowo9HCQBxdccIGJ/VpJZa1Tp04mbt68uZOzx+qP266Ji9Lx22+/OW27Fpxdr1Jy62cvXLgwL+PZZpttTJyptt2ECRPycn6UnUMOOcRpn3rqqZF9lyxZ4rTnzp2blzEhvxYtWmRiu/ag377qqqtK5Xy77bab07brs/t1MK+44opSOSfy680333Ta9trg1721a9Rmqlnpf+bFF1/stF9++WUT/+Uvf3Fydv1J+zoMhVG/fn0T+9eQ9jsArrvuOifXv39/Ew8dOtTJffjhhya266BK0jfffGPiqVOnZhzbXnvtZWJ/f4bvsHhYuXKl07ZrZdeqVcvJ2e+kst9VJUm//vqriefMmePk7Hlo/x6XpP3337+EI04ZNmyY077mmmtM7Nf0LjTuxAUAAAAAAACAGGMTFwAAAAAAAABijE1cAAAAAAAAAIixCl8Tt1q1ak77qKOOMvHq1audnF0jdc2aNfkdGHJWt25dp23XL/HrHNv8ul3Lli0r3YGh6Gy33XZOu02bNib+6quvnNzo0aMLMibkl113tizYdcmaNm3q5Oy1LpP58+c7bb7PSp9f/2vWrFkm7tKli5N75ZVXTDx48OCczrf33ns7bb9G5S677GLiTDUL41bnGZvOvyaqVCn6/o1///vf+R4OipBfB9NeY/y6u/73D+LJr89+8sknm9h/x8PWW28d+Tn33HOPif25sGrVKqc9atQoE9t1MSXpyCOPNHGjRo2cnP39ivy4/fbbTdy7d++sj7O/by666CIn57dLg7++2O+76d69e6mfD5vOry3r/7efi8cff9xpZ6qJ67/Dwp7fjz76qJP7448/NnlspYU7cQEAAAAAAAAgxtjEBQAAAAAAAIAYq/DlFPr06eO0mzdvbuKxY8c6uYkTJxZkTNg0l19+udNu3bp1ZN8XXnjBxHa5DCAbf//73532NttsY+LXXnutwKNBRdCvXz8TX3zxxVkf991335n4jDPOcHJz5szZ5HEhM/v7JQgCJ3fMMceYePjw4Tl9/oIFC5y2XzKhXr16WX2O/+gYyr+uXbtG5vzHGB944IF8DwdF4KSTTnLap59+utO2H0/99ddfCzIm5Nebb75pYn9NOfXUU03sryl2qQ2/fILv+uuvN/Gee+7p5I477ri0nylteE2D0mc/4v7ss886uaefftrEVaq4W0s77bSTiTOV8iktdskxyZ2r/fv3d3KDBg3K+3hQOFdeeaWJS1I644ILLnDauV6HFxp34gIAAAAAAABAjLGJCwAAAAAAAAAxxiYuAAAAAAAAAMRYhauJa9eek6Rrr73WaS9dutTEAwcOLMiYULp69+6ddd9LLrnExMuWLcvHcFDEGjZsGJlbtGhRAUeCYvXqq6867d133z2nz5k2bZqJJ0yYsEljQsnNmDHDxCeffLKTa9asmYkbN26c0+ePGDEiY/6xxx4zcY8ePSL7rVy5MqfzI1523HFHE9v1Kn1z58512p9++mnexoTicfTRR2fMv/zyyyaeNGlSvoeDArPr46Zr58r+/vHrrto1cdu3b+/k6tSpY+KFCxeWyljg+uOPP0zsf080adIk8rjDDjvMxFWrVnVyAwYMMHGm99dsCvsdBC1btszLOVA2zjnnHKdt1zz2azP7pk6dauJRo0aV7sAKhDtxAQAAAAAAACDG2MQFAAAAAAAAgBirEOUU6tata+L/+7//c3KVK1d22vajqx9++GF+B4YyZz+Cs2bNmpw/Z8mSJZGfYz8+svXWW0d+Rq1atZx2tmUh7EdcJOmqq64y8YoVK7L6DOTm2GOPjcy99NJLBRwJCsV+NKtSpei/B830uOmwYcOc9vbbbx/Z1z/HunXrNjbEtDp16pTTcci/L774Im1cmr799tus+u29995O+8svv8zHcJBnBx98sIkzrVMvvPBCIYaDIuN/vy1fvtxp33HHHYUcDorQc88957TtcgrdunVzcnZpPEohxstbb70VmbNLSfnlFNauXWviRx55xMk9+OCDTvuf//yniTOVD0L5t//++5vY/56pXr165HF+ycwLLrjAxL///nspja6wuBMXAAAAAAAAAGKMTVwAAAAAAAAAiDE2cQEAAAAAAAAgxoqyJq5f53bs2LEm3nXXXZ3crFmznPa1116bv4EhdqZMmVIqn/P888+beN68eU5u2223NbFfxykffvrpJxPfcMMNeT9fRXPIIYeYeLvttivDkaAs3H///Sa+9dZbI/u9/PLLTjtTLduS1LnNtu/QoUOz/kwUP7uWsx37qIFbHOx3QfgWLFhg4rvvvrsQw0ERsGsI2te1kvTLL7847UmTJhVkTChe/rWOfb11/PHHO7lEImHiZ555xsnNnDkzD7y9so4AACAASURBVKNDaXjjjTdM7P9erVLlf1tU5557rpNr3Lix027Xrl1W55s7d24JR4i4sd/vUaNGjch+fp12u6a2JL3//vulO7AywJ24AAAAAAAAABBjbOICAAAAAAAAQIwVZTmFRo0aOe2WLVtG9u3du7fT9ssroPx59dVXnbb/2E0+nHTSSTkdt3btWhNnekx6zJgxTvvTTz+N7Pvee+/lNBZk54QTTjCxX7rl888/N/G7775bsDGhcEaNGmXiPn36OLn69evn/fzz58838fTp053ceeedZ2K/rAsqtjAM08YoTkceeWRkbs6cOSZesmRJIYaDImCXU/DXkFdeeSXyOP+R19q1a5vYnotAJl988YWJr7vuOid32223mfjGG290cj179jTxypUr8zQ65MK+hn3uueec3Mknnxx5XPv27SNzf/zxh9O216a+ffuWdIgoY/73x5VXXpnVcU899ZTTHjduXGkNKTa4ExcAAAAAAAAAYoxNXAAAAAAAAACIMTZxAQAAAAAAACDGiqYmbsOGDU38xhtvRPbzaxi+/PLLeRsTysaJJ57otO36KVWrVs36c/baay8Td+vWLevjHn74Yaf93XffRfYdOXKkiWfMmJH1OVA4W265pdPu2LFjZN8RI0aY2K/LhOIwe/ZsE3fv3t3Jde7c2cS9evXKy/lvuOEGEw8ZMiQv50Dx2WKLLSJz1Aks//xrG//dELZVq1aZeM2aNXkbEyoO/3qnR48eJr7sssuc3NSpU018xhln5HdgKEqPP/640z7//PNN7P8GHDhwoImnTJmS34GhROxrj3/+859Ornr16iZu1aqVk9tmm22ctv07+4knnnByAwYM2MRRotDsf/fTpk1zcpn2cez/vv35VIy4ExcAAAAAAAAAYoxNXAAAAAAAAACIsaIpp3DeeeeZeOedd47sN378eKcdhmHexoR4uPXWWzf5M0499dRSGAnKI/9x00WLFpl4zJgxTu7uu+8uyJgQD++++25k2y/rY39HderUycnZ82jYsGFOLggCp+0/WgRk48wzzzTx4sWLndz1119f6OGglK1bt85pf/rppybee++9ndw333xTkDGh4jjnnHOc9tlnn23ihx56yMmx3mBTzZ8/32kffvjhJvZL2F111VUmtst8IF5+/vlnp21fJ/fs2dPJHXjggU47mUya+JdffsnD6FBIHTp0MPGOO+7o5DLt29mle+yyUcWKO3EBAAAAAAAAIMbYxAUAAAAAAACAGGMTFwAAAAAAAABirNzWxD3kkEOc9qWXXlpGIwFQzPyauAcffHAZjQTlydixYzO2gUL65JNPTDx48GAn98477xR6OChlf/zxh9Pu16+fif0acp999llBxoTicskll5h44MCBTs6vD3///feb2H6PgCStXr06D6NDRTZnzhwTv/nmm07uuOOOM3HTpk2dHO8YKB+eeOKJjG0UF7tueqYauLfddpvTrmjXstyJCwAAAAAAAAAxxiYuAAAAAAAAAMRYuS2n0KZNG6ddvXr1yL6zZs0y8bJly/I2JgAAgLjp1KlTWQ8BBfTjjz+a+KyzzirDkaBYTJgwwcQdOnQow5EA0bp27eq0J0+ebOLGjRs7OcopAPFTp04dEwdB4OR++eUXE991110FG1MccScuAAAAAAAAAMQYm7gAAAAAAAAAEGNs4gIAAAAAAABAjJXbmriZ2PVvJOmwww4z8cKFCws9HAAAAAAAkCdLly512rvuumsZjQRALgYPHpw2lqTrr7/exPPmzSvYmOKIO3EBAAAAAAAAIMbYxAUAAAAAAACAGAvCMMy+cxBk3xn59lkYhq3KehDZYN7ERxiGQVmPIRvMmVhhrUEumDfIBfMGuWDeIBfMG+SCeYMS4zc4chC51nAnLgAAAAAAAADEGJu4AAAAAAAAABBjbOICAAAAAAAAQIxVKWH/BZJm52MgKLGGZT2AEmDexANzBrlg3iAXzBvkgnmDXDBvkAvmDXLBvEFJMWeQi8h5U6IXmwEAAAAAAAAACotyCgAAAAAAAAAQY2ziAgAAAAAAAECMlbQmbrkWJIOmkh6X1DpMZK4j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AAAAAAAAYoxNXAAAAAAAAACIMTZxAQAAAAAAACDG2MQFAAAAAAAAgBirUtYDAApp8803d9rvv/++iZs3b+7kXnrpJRN37tw5vwMDAAAAAAAAInAnLgAAAAAAAADEGJu4AAAAAAAAABBjRVNO4ZBDDjHxBx984OR23313Ex977LFO7phjjnHar7zySuQ5Jk6caOIJEybkNE4Unl1C4c4773RyzZo1M3EYhk7us88+y+/AAADI0YABA0ycSCSc3Lhx45x2+/btCzAixFHLli2dtl0eqkuXLk7Ovl6WpCAITOxfI02aNMnE06dPd3I33nijiWfMmFHCEQMA4qp69epOe8cddzTxRRddFHncww8/7LS/+OKL0h0YUIFwJy4AAAAAAAAAxBibuAAAAAAAAAAQY2ziAgAAAAAAAECMlauauDVr1jTxU0895eQ6dOhg4pUrVzq5zTbbzMR+HRdfmzZtInP2565YscLJXXjhhSYeMWJExnOgsP7xj3+Y+LzzznNyb7/9tomvu+46J/fhhx/md2AAKqTatWs7bbs299FHH+3k+vTp47TXrVtnYv+7Zvbs2Sa+4447nNzPP/+c22ARW23bto3MtWvXLrLt18tF+eBfv+yxxx4mznTt2qJFC6dt17a1a976OUkaNmyYiUePHu3k3njjjY2MGABQDOz9E/+6tH///ll9xgUXXOC0n332WRP36tXLyS1cuLCkQwRKxTPPPGPil156ycn5+49liTtxAQAAAAAAACDG2MQFAAAAAAAAgBgrV+UUbrnlFhMfc8wxkf2qVavmtKdPn27i+fPnO7mlS5dGfo7/mJl9Tv8cDz30kIlnzpzp5KZMmRJ5DuTfdtttF5l78803TUz5BAClpWrVqk778ssvN/HFF1/s5Bo0aBD5OXb5BMl93LlLly6Rx9WrV89pn3XWWdGDRbnkl0zIti/lFMqnoUOHOm17LfBLfM2YMcPEd999d2TOvyb2SyagYrHXiRNPPNHJ2d8322+/vZObNGmS037++edNfPPNN5fiCAGUhauvvtrEffv2zekzKleu7LRPPfVUE9tlMSXpzDPPNDGle5BPlSq597Tac3HatGmFHk7WuBMXAAAAAAAAAGKMTVwAAAAAAAAAiDE2cQEAAAAAAAAgxmJdE3evvfZy2l27do3sO3fuXBOffvrpTu6bb74x8eLFi53csmXLIj/Tr5Fx3XXXmbh///5OrmbNmiZOJBJO7pxzzjHxokWLIs+H/KhRo4aJ16xZ4+TsmrhASTVr1sxpX3/99Sbu2LGjk/PXE7vW6YgRI5xcv379TDxv3jwn1759exO/9dZbTm7lypXZDBsFcP755zvtQYMG5fQ548ePd9qHHnpoVsf534PUxK3YBgwYUNZDwCYaNWqU0+7cubOJ7Tq3ktS6deuCjAnlj/2eCH9O7b///ib23wti/8766quvnNzOO+/stO3vu9mzZzu54cOHl3DE2BRHH320037hhRdM7Nfuz8S+vhwzZkxkP//ft12T+4ADDnByCxYscNoTJkzIejworO+++y4yZ9dnHzJkiJObOnWqif35NnDgQBP776958cUXTWy/E0mSbr31Vqft14QHSqJ58+ZO23+nSFxxJy4AAAAAAAAAxBibuAAAAAAAAAAQY7Eup2A/Bi9JdevWNbF9677k3mo/bty4Ujm//biz5D6OuNlmmzm5K664wsQnnHCCk3v44YdN/Morr5TK2BBt++23d9pnn322iSdOnOjkJk2aVJAxofzyH/9p27atiR955BEn16BBAxP7a5S/ntj5Ll26ODn7sbWddtrJybVr187EZ5xxhpN78sknNxg/CscuAXTttdfm9Bl9+/Z12vajiJL7+FmfPn1yOgeA8ufCCy902i1btjRxw4YNnZz9ePucOXPyOzDEmv9oqP07xC8JZc8VvyTQRx99ZOIlS5Y4Of86xX4U+qSTTnJyzz77bGTu888/N/HXX3/t5PxrKmTHXxtKUkLBVq1aNRN369Yt6+Muu+yyyHP718X2HPPLjE2bNs3E/qP9fnkPlD67fI/v+eefN3GvXr2y/szJkyebePTo0U6uTp06Jvavpxs1auS07XJhftlElD9NmjQx8e233+7kLr30UhP7pVvy4T//+U/ez5Er7sQFAAAAAAAAgBhjExcAAAAAAAAAYoxNXAAAAAAAAACIsVjXxN18880jc4899pjTHjJkSL6H47jmmmuctl0faNddd3VyJ554oompiZt//fv3L+shOA488EAT+3XDbHZtIEmaOXNm3saE7LVo0cJpjx07NrLvvHnzTHzJJZc4uRUrVkQe59csW758uYnvueceJ7d69eq050Ph2TVwJemmm24ysV+H0K7n59dxOu6440w8ffp0J+fXjLvuuutM7NcQGzNmTOT5p0yZYuJ9991XKP+SyaSJE4lExr52TX87Rvkxf/58pz1s2DATDxo0yMnZ//1TE7di82un23Vwf/zxRye3++67m9i+1tiY77//3mnbtW5///13J9exY0cTP/3005GfWb16dadtvysA2XvooYectl0ztHHjxk4u01qxxRZbmPj444/P+vx77rmnievXr+/kKlVy7yU76KCD0sa+VatWOe3bbrvNxBv7LkRu7P9u/etS//snWxMmTDCxP6fs6+lDDjnEyZ166qmRn3nmmWc67bVr1+Y0NpQde9/k2GOPdXL2/l9p1cT110HbDz/8UCrnyAfuxAUAAAAAAACAGGMTFwAAAAAAAABiLNblFK6//vrI3EcffVTAkWzc66+/buILLrjAydm3hSP/jjnmmMic/1hRabn//vsjz1+7dm0TV6tWLfIzli5d6rTvvPNOE2f6bwGlz35M3n5E3ffWW2857auvvtrEkyZNyvp822+/vdN+8cUXTVyrVi0nZz825p8fheWX2rD/2/cfE7QfTb3vvvuc3NSpU7M+p/0o5Mcff+zkHn30URNffvnlTm6fffYxsf0YtiSdd955WZ8f8cFjoxWbvcYEQeDk7EeY/VwmfjmXTGWAEF/du3c3ce/evZ3cwoULTWzPE6lkJRQymTVrlombNm3q5B5//PHI4+xrH/+ReeTGvmaQSud3kP37ZGP23ntvE//tb3/L2Nd+TL5ly5aR/ezSDpLUq1cvEw8ePNjJLVmyJKtxIrM333zTxB06dHBydgm4XE2cONFpX3nllSb2S1Hav6sld9689NJLTu65557b5LGhsPz5ZctHeQP/N9DixYtNXJLf8oXGnbgAAAAAAAAAEGNs4gIAAAAAAABAjLGJCwAAAAAAAAAxFruauLvttpuJ/TqRdl2b//znPwUbUzbefvttE/s1cZF/W265pYmrVHGntV0/xa4ZuTH25/i1L0ePHu20t9tuOxP7tTDnz59vYrumkP+5O++8s5Oza7T4NcRmz56dcezYNNdee62J69Wr5+Ts2kx+rblvvvkmp/PZNcMkqXnz5pF9x44dm9M5UPqOPvpopx2GoYnXrVvn5MaNG2fiO+64Iy/j6du3b+TY7DnWqlWrvJwfQP7Ur1/faZ9zzjkmttceSXrsscdM7NfEtfv6Of/a5qmnnorMIb723XdfE/vXpHYN9mXL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uXTpUhNvvfXWTm7OnDkm/v777wX8qXHjxiYeNGhQZL/ly5c77YceeihvY8Kmsd8P0qRJEyc3ceJEE2d6/8emvBukV69eJn722Wed3P33329ivybu4YcfbmK/xvfRRx+d83iQ8vvvv5v466+/dnLbbLONie36tJL02GOPmThTLeSNsb+HdtxxRydnv5Po/PPPd3LUxAUAAAAAAAAAZIVNXAAAAAAAAACIsTIvp1BetWzZ0mkfe+yxkX2vueaafA8HObJvk//rX//q5Oz21Vdf7eSGDRvmtH/99deczm+XTFixYoWT8x9BRP6sXLnSaXfq1MnE7dq1c3KtWrWK/JypU6ea+LXXXnNyQ4YMcdpdu3Y18cyZM53crFmzMg8Y2ATLli1z2rmuXwCQzrvvvmti/9HT8ePHm/j22293cpRTKB1z58418Wmnnebk+vXrZ+IOHTo4ObttP1IqSf/9739NPG7cOCc3fPhwp/3yyy+b2C/f89Zbb5l44cKFacePisF+1F5y14Otttoq8rjrrrvOac+YMaN0B4ac2b+fJHdNt0sISlL37t1N/OKLL+Z3YHLLN0jSIYccYuJJkyY5ud12283EBx10kJM76qijTDx27NjSHGKFsWrVKhPbZeokqUqV/21PltZ3xA477OC0a9eubeLJkyc7uTPOOMPE/t5MnHAnLgAAAAAAAADEGJu4AAAAAAAAABBjbOICAAAAAAAAQIxRE7cE7Dq4vXv3dnK1atUy8fvvv+/kXn/99fwOrALy6+o0aNAgp8+xa0G2aNHCyY0ZM8bE119/vZOz6+FIbk3k3377LTLXv39/J9e8eXMTDxo0yMl9+OGHGceOwvBrv/ntbF1wwQVO264T98knnzi5+fPn53QO4E+nn356ZG7AgAFO268FhvLBXov82t0++9+5/+8fyKcFCxY47QkTJph4jz32KPRwKhz7WlZy6/X77/ewrV692mln+p5o0qSJ095ss80i+44YMSIyh4qlb9++Tvu4446L7Pvtt9+a+O67787bmLBpqlev7rTt3+v+ujBy5EgT2/VppcL8BrZ/r59yyilO7oMPPjBxjRo1nNxVV11lYmribrqlS5fm/Rz+vo1dc9uu4S5JU6ZMyft4SgN34gIAAAAAAABAjLGJCwAAAAAAAAAxVublFL777jun7T+KXpYqV67stK+44goTd+vWzcn9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\n",
      "text/plain": [
       "<Figure size 1800x288 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# obtain one batch of test images\n",
    "dataiter = iter(test_loader)\n",
    "images, labels = dataiter.next()\n",
    "\n",
    "# get sample outputs\n",
    "output = model(images)\n",
    "# convert output probabilities to predicted class\n",
    "_, preds = torch.max(output, 1)\n",
    "# prep images for display\n",
    "images = images.numpy()\n",
    "\n",
    "# plot the images in the batch, along with predicted and true labels\n",
    "fig = plt.figure(figsize=(25, 4))\n",
    "for idx in np.arange(20):\n",
    "    ax = fig.add_subplot(2, 20/2, idx+1, xticks=[], yticks=[])\n",
    "    ax.imshow(np.squeeze(images[idx]), cmap='gray')\n",
    "    ax.set_title(\"{} ({})\".format(str(preds[idx].item()), str(labels[idx].item())),\n",
    "                 color=(\"green\" if preds[idx]==labels[idx] else \"red\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
